#!/bin/sh
#
# Script for update and create DNS records in CloudFlare
# by Evgeniy Shumilov <evgeniy.shumilov@gmail.com>
#

# CLI structute:
# [ ] $0 [help|h|?] # for help (if cred exists)
# [*] $0 <set> <credentials|cred> # for update credentials
# [ ] $0 <set> <record> # for updating record
# [*] $0 <set> <ttl> # for updating default ttl
# [*] $0 <set> <iface> # for setting interface name
# [ ] $0 <list> <domain.xxx> # for getting of records list
# [*] $0 <update|add|edit> <test1,test2,test3.domain.xxx> [ip|iface] [A|CNAME] [ttl]
# [*] $0 <del|remove|rm> <test1,test2,test3.domain.xxx>

# TODO:
# Update help method
# Move README.md to README_RUS.md
# Create and update README.md

# You can place some (or all) of parameters below instead of using them in commandline
###VARSBEGIN###
authemail='' # email used for authentication
authkey='' # api key
iface='' # interface name
ttl='' # default ttl for new records
zid='' # zone id
zdomain='' # domain for zone id updating
llevel='info' # loglevel (debug/info/warning)
lastupdate='' # info from last update (do not change)
###VARSEND###

uri='https://api.cloudflare.com/client/v4/'
resp=''; rid=''; rcontent=''; rttl=''; rip=''
h="Run \"$0 help\" for help."

[ -n "$ll" ] && LOGLEVEL="$ll" || LOGLEVEL="$llevel"
LPREF='date +%Y.%m.%d-%H:%M:%S'
DEFAULT_COLS=70 # If tput program is not exist
LCOLOR=1 # 0/1

c='[0m'
l0='[1;30;49m'
l1='[1;31;49m'
l2='[1;32;49m'
l3='[1;33;49m'
l4='[1;34;49m'
l5='[1;35;49m'
l6='[1;36;49m'
l7='[1;37;49m'
d0='[0;30;49m'
d1='[0;31;49m'
d2='[0;32;49m'
d3='[0;33;49m'
d4='[0;34;49m'
d5='[0;35;49m'
d6='[0;36;49m'
d7='[0;37;49m'

# DIV function
dv=''
d() {
    if [ -z "$dv" ]; then
        [ -n "$(which tput)" ] && COLS=`tput cols` || COLS="$DEFAULT_COLS"
        cnt=`echo "$COLS" | awk '{ print $1/2 }'`
        [ "$LCOLOR" = "1" ] && tpl="$l1""=""$l3""-" || tpl='=-'
        for i in `seq 1 "$cnt"`; do
            dv="$(echo "$dv$tpl")"
        done
        [ "$LCOLOR" = "1" ] && dv="$(echo "$dv$c")"
    fi
    echo "$dv"
}

# Logging function
l() {
    [ -z "$LPREF" ] && LPREF='date +%Y.%m.%d-%H:%M:%S'
    if [ -n "$2" ]; then
        case "$1" in
            d)
                if [ "$LOGLEVEL" = "debug" ]; then
                    b=''; e=''; [ "$LCOLOR" = "1" ] && b="$d4" && e="$c"
                    echo "$b"`$LPREF`"   DEBUG: $2$e"
                fi
            ;;
            i)
                if [ "$LOGLEVEL" = "debug" ] || [ "$LOGLEVEL" = "info" ]; then
                    b=''; e=''; [ "$LCOLOR" = "1" ] && b="$d2" && e="$c"
                    echo "$b"`$LPREF`"    INFO: $2$e"
                fi
            ;;
            n)
                if [ "$LOGLEVEL" = "debug" ] || [ "$LOGLEVEL" = "info" ] || [ "$LOGLEVEL" = "notice" ]; then
                    b=''; e=''; [ "$LCOLOR" = "1" ] && b="$l2" && e="$c"
                    echo "$b"`$LPREF`"  NOTICE: $2$e"
                fi
            ;;
            w)
                if [ "$LOGLEVEL" = "debug" ] || [ "$LOGLEVEL" = "info" ] || [ "$LOGLEVEL" = "warning" ] || [ "$LOGLEVEL" = "notice" ]; then
                    b=''; e=''; [ "$LCOLOR" = "1" ] && b="$d3" && e="$c"
                    echo "$b"`$LPREF`" WARNING: $2$e"
                fi
            ;;
            e)
                b=''; e=''; [ "$LCOLOR" = "1" ] && b="$d1" && e="$c"
                echo "$b"`$LPREF`"   ERROR: $2$e"
            ;;
            f)
                b=''; e=''; [ "$LCOLOR" = "1" ] && b="$l1" && e="$c"
                echo "$b"`$LPREF`"   FATAL: $2$e"
            ;;
            fe)
                b=''; e=''; [ "$LCOLOR" = "1" ] && b="$l1" && e="$c"
                echo "$b"`$LPREF`"   FATAL: $2$e"
                b=''; e=''; [ "$LCOLOR" = "1" ] && b="$d2" && e="$c"
                echo "$b"`$LPREF`"    INFO: All next operations will be cancelled...$e"
                [ -n "$3" ] && exit $3 || exit 1
            ;;
        esac
    else
        case "$1" in
            fe)
                b=''; e=''; [ "$LCOLOR" = "1" ] && b="$l1" && e="$c"
                echo "$b"`$LPREF`" FATAL: Not enough parameters.$e"
                b=''; e=''; [ "$LCOLOR" = "1" ] && b="$d2" && e="$c"
                echo "$b"`$LPREF`" INFO: All next operations will be cancelled...$e"
                exit 1
            ;;
            *)
                l i "$1"
            ;;
        esac
    fi
}

help() {
    d
    echo "This is script for updating dns records on CloudFlare dns hosting"
    echo
    echo "To update CloudFlare dns records, we need at least domain, subdomain(s),"
    echo "api key and address or network interface name."
    echo
    echo "Notice: at the moment only records with A type can be updated."
    echo "You should get api key in your CloudFlare's profile. In \"API Keys\" section"
    echo "find \"View\" button near the \"Global API Key label\"."
    d
    echo "Simple way to use:"
    echo "  $0 <add|edit|update> <subdomain(s)>.<domain> <ip address|interface> [ttl]"
    echo "  Frist parameteradd,edit,update - is equal. Subdomains can be divided by"
    echo "  comma. You can use * for wildcard and @ for root record. If some record"
    echo "  is not exists, it will be created. At first time script will ask you for"
    echo "  all needed variables such as email, key, default tty."
    echo "Examples:"
    echo "  $0 add test.domain.xxx 127.0.0.1 14400"
    echo "  $0 update www,test,*,@.domain.xxx eth0"
    d
}

# Updating variable
# 1 - variable name
# 2 - optional check mask
# 3 - optional comment (will taken from variable comment if not exists)
# 4 - optional value for non-interactive update
updateVar() {
    [ -z "$1" ] && l fe "Variable name not exists"
    l d "Updating variable $1"
    var=`awk '{print NR"\t"$0}' "$0" | sed '1,/###VARSBEGIN###/d;/###VARSEND###/,$d;s/^[^0-9]\+//;/\t'"$1"'=/!d'`
    [ -n "$3" ] && comm="$3" || comm=`echo "$var" | sed '/#/!d;s/^.*#[ \t]*//'`
    [ -z "$comm" ] && comm="$1"
    val=`echo "$var" | sed 's/[ \t]*#.*$//;s/^[0-9]\+[ \t]*'"$1"'=//;s/^["'"'"']//;s/["'"'"']$//'`
    nline=`echo "$var" | awk '{print $1}'`
    if [ -z "$4" ]; then
        res=''
        while [ -z "$res" ]; do
            [ -z "$val" ] && echo -n "Input $comm: " || echo -n "Input $comm (current is $val): "
            read res
            if [ -n "$2" ]; then
                [ -z "$(echo "$res" | grep -E "$2")" ] && l w "Variable $1 check is failed, try again" && res=''
            else
                break
            fi
        done
    else
        res="$4"
    fi
    if [ "$res" != "$val" ]; then
        if [ -n "$nline" ]; then
            sed -i "$nline"'s/^.*$/'"$1"'='"'""$res""'"" # $comm"'/' "$0"
        else
            nline=`awk '{print NR"\t"$0}' "$0" |  awk '$2~/###VARSEND###/ {print $1}'`
            sed -i "$nline"'i'"$1=\'$res\' # $comm" "$0"
        fi
        sync
        l d "Variable $1 is setted with value $res"
    else
        l n "Variable $1 is not changed and will not be updated"
    fi
    export "$1"="$res"
}

# Clean var
# 1 - variable name
cleanVar() {
    l i "Cleaning variable $1"
    var=`awk '{print NR"\t"$0}' "$0" | sed '1,/###VARSBEGIN###/d;/###VARSEND###/,$d;s/^[^0-9]\+//;/\t'"$1"'=/!d'`
    comm=`echo "$var" | sed '/#/!d;s/^.*#[ \t]*//'`
    [ -n "$comm" ] && comm=`echo " # $comm"`
    nline=`echo "$var" | awk '{print $1}'`
    if [ -n "$nline" ]; then
        sed -i "$nline"'s/^.*$/'"$1=''$comm"'/' "$0"
    else
        nline=`awk '{print NR" "$0}' "$0" |  awk '$2~/###VARSEND###/ {print $1}'`
        sed "$nline"'i'"$1=\'\'$comm" "$0"
    fi
    sync
}

# Updating credentials
updateCred() {
    l i 'Updating credentials...'
    updateVar authemail '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}$'
    updateVar authkey '^[a-z0-9]{38}$'
}

# Check credentials
checkMainVars() {
    l i "Checking main variable..."
    [ -z "$authemail" ] && updateVar authemail '^([a-zA-Z0-9_-]+\.?)*@([a-zA-Z0-9_-]+\.)[a-zA-Z][a-zA-Z]{1,11}$'
    [ -z "$authkey" ] && updateVar authkey '^[a-z0-9]{37}$'
    [ -z "$ttl" ] && updateVar ttl '^[0-9]{2,5}$'
}

# Extracting vars from json
extractVars() {
    echo "$1" | sed 's/\(","\|{"\|,"\|[{\[]\)/\n/g;s/":"/ /g;s/":/ /g' | sed 's/\(["}]\|\]\).*$//' | sed '/^$/d;/^[a-z]*[ ]*$/d'
}

# Get var from vars
# 1 - vars content
# 2 - variable name
getVar() {
    echo "$1" | awk '$1~/^'$2'$/ {print $2}'
}

# Get main domain
getDomain() {
	[ "$(echo "$1" | sed 's/[^\.]//g' | wc -c)" -lt 3 ] && echo "$1" || echo "$1" | sed 's/[^\.]*\.//'
}

# CloudFlare api
api() {
    resp=''
    fulluri="$uri$1"
    [ -n "$2" ] && METHOD="$2" || METHOD='GET'
    l d "API query: $fulluri"
    [ -n "$3" ] && DATA=" --data $3" && l d "DATA: $3"
    if resp=`curl -s -X "$METHOD" -H "X-Auth-Key: $authkey" -H "X-Auth-Email: $authemail" -H 'Content-Type: application/json; charset=utf-8' "$fulluri" $DATA`; then
        if [ -n "$resp" ]; then        
            l d "Response:
$resp"
            [ -z "$(echo "$resp" | grep -F '"success":true')" ] && l fe "Fail to make api request for $fullurl" 1
        else
            l fe "Empty response from api: $fulluri" 2
        fi
    else
        l fe "Can't make request for uri $fulluri" 1
    fi
}

# Get zone id
# 1 - zone name
# 2 - if not empty, selfsaving zid and zdomain
getZoneID() {
    l i "Trying to get zone id for $1"
    resp=''
    api "zones?name=$1"
    oldzid="$zid"
    zid=`extractVars "$resp" | sed '/^id /!d;s/^id //' | head -n 1`
    [ -z "$zid" ] && l fe "Fail to get zone id" 127
    if [ -n "$2" ]; then
        updateVar zid '^[a-z0-9]{32}$' '' "$zid"
        updateVar zdomain '^([a-zA-Z0-9_-]+\.)*[a-zA-Z0-9][a-zA-Z0-9_-]+\.[a-zA-Z][a-zA-Z]{1,11}$' '' "$1"
    fi
}

# Update zone id
# 1 - zone name
updateZoneID() {
    if [ -z "$zdomain" ]; then
        getZoneID "$1"
    else
        if [ "$zdomain" != $1 ]; then
            getZoneID "$1" 1
        elif [ -z "$zid" ]; then
            getZoneID "$1" 1
        fi
    fi
}

# Get record id
# 1 - record name
getRecord() {
    l i "Trying to get record $1 id"
    resp=''; rcontent=''; rttl=''
    api "zones/$zid/dns_records?name=$1"
    rvars=`extractVars "$resp"`
    rcontent=`echo "$rvars" | sed '/^content /!d;s/^content //'`
    rttl=`echo "$rvars" | sed '/^ttl /!d;s/^ttl //'`
	rid=`echo "$rvars" | sed '/^id /!d;s/^id //' | head -n 1`
	[ -z "$rid" ] && l w "Fail to get record id $1"
}

# Get ip address from network interface by name
# 1 - iface name
getIP() {
    if [ -n "$1" ]; then
        if [ -n "$(echo "$1" | grep '^[a-zA-Z][a-zA-Z0-9-]*$')" ]; then
            if rip=`ip address show "$1" | sed '/^[ ]*inet /!d;s/^[ ]*inet //;s/ .*$//;s/\/[0-9]*$//'`; then
                [ -z "$(echo "$rip" | grep '\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}')" ] && l fe "Can't get ip address from interface $2"
                l i "Got ip $rip from interface $1"
            else
                l fe "Can't get ip address from interface $iface" 127
            fi
        else
            l fe "Wrong name of network interface" 127
        fi
    else
        l fe "Empty network interface name" 127
    fi
}

# Update records
# 1 - record name(s)
# 2 - record content (optional if iface variable is setted)
# 3 - type of record (default is A)
# 4 - ttl (optional if ttl variable is setted)
updateRecords() {
	l d "Updating records $1"
	[ -z "$1" ] && l fe "Empty record name for updating" 127
	[ -z "$2$iface" ] && l fe "Empty record content for updating" 127
    cont=''
    if [ -z "$2" ]; then # if 2nd parameter is empty, trying to get interface from saved variable
        getIP "$iface"
        cont="$rip"
    else # Trying to check if 2nd parameter is ip address
        if [ -n "$(echo "$2" | grep '\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}')" ]; then
            cont="$2"
            l i "IP address for updating: $cont"
        else # 2nd parameter is not ip address, checking if it's an interface
            getIP "$2"
            cont="$rip"
        fi
    fi
    [ -z "$cont" ] && l fe "Fail to get content for updating dns records"
    [ -z "$3" ] && rtype='A' || rtype="$3"
    [ -z "$4" ] && cttl="$ttl" || cttl="$4"
    [ -z "$cttl" ] && l fe "Fail to get ttl for updating DNS record(s)"
    if [ "$lastupdate" != "$1:$2:$3:$4" ]; then 
        cdomain=`getDomain "$1"`
        updateZoneID "$cdomain"
        records=`echo "$1" | sed 's/\..*$//;s/,/ /g;s/\*/#/'`
        for rec in $records; do
            [ "$rec" = '#' ] && rec='*'
            [ "$rec" = "@" ] && frec="$cdomain" || frec="$rec.$cdomain"
            rid=''
            getRecord "$frec"
            if [ -n "$rid" ]; then
                if [ "$rcontent$rttl" != "$cont$cttl" ]; then
                    l i "Updating record $frec"
                    api "zones/$zid/dns_records/$rid" PUT '{"id":"'"$zid"'","type":"'"$rtype"'","name":"'"$frec"'","content":"'"$cont"'","ttl":'"$cttl"'}'
                else
                    l i "Content for record $frec does not changed"
                fi
            else
                l i "Record $frec not found, creating new one"
                api "zones/$zid/dns_records" POST '{"type":"'"$rtype"'","name":"'"$frec"'","content":"'"$cont"'","ttl":'"$cttl"',"proxied":false}'
            fi
        done
        updateVar lastupdate '' '' "$1:$2:$3:$4"
    else
        l n "There is no changes since last update"
    fi
}


d
l i 'Start escflare script...'

case "$1" in
    test)
        LOGLEVEL='debug'
        getIP wlp1s0
    ;;
    set)
        case "$2" in
            cred*)
                credUpdate
            ;;
            zone)
                updateVar zdomain '^([a-zA-Z0-9_-]+\.)*[a-zA-Z0-9][a-zA-Z0-9_-]+\.[a-zA-Z][a-zA-Z]{1,11}$'
            ;;
            ttl)
                updateVar ttl '^[0-9]{2,5}$'
            ;;
            loglevel)
                udpateVar ttl '^(debug|info|warning)$'
            ;;
            *)
                help
            ;;
        esac
    ;;
    clean|clear)
        case "$2" in
            all)
                cleanVar authemail
                cleanVar authkey
                cleanVar iface
                cleanVar ttl
                cleanVar zid
                cleanVar zdomain
                cleanVar lastupdate
                updateVar llevel '' '' info
            ;;
            *)
                cleanVar "$2"
            ;;
        esac
    ;;
    list|ls)
        checkMainVars
    ;;
    update|add|edit)
        checkMainVars
        updateRecords "$2" "$3" '' "$4"
    ;;
    del|rm|delete)
        checkMainVars
    ;;
    *)
        help
    ;;
esac

l i "Finished"
d
exit 0

#vim: syntax=sh nu expandtab shiftwidth=4 softtabstop=4 tabstop=4
